version 1.1;

contract Ballot {

    struct Voter {
        int weight
        bool voted
        address delegate
        int vote
    }

    struct Proposal {
        String name
        int voteCount
    }

    address chairperson

    Map<address, Voter> voters

    Proposal[] proposals

    constructor(String[] proposalNames) {
        chairperson = msg.sender
        voters[chairperson].weight = 1
        proposals = new Proposal[proposalNames.length]

        foreach(i, String name : proposalNames) {
            proposals[i] = new Proposal(name, 0)
        }
    }

    function bool isChairPerson() {
        return msg.sender == chairperson
    }

    function bool didNotVoteYet(address voter) {
        return !voters[voter].voted
    }

    function bool doesNotHaveRightToVote(address voter) {
        return voters[voter].weight == 0
    }

    [Pre=isChairPerson]
    [Pre=didNotVoteYet(voter)]
    [Pre=doesNotHaveRightToVote(voter)]
    function void giveRightToVote(address voter) {
        
    }

    [Pre = !voters[msg.sender].voted]
    [Pre = to != msg.sender]
    function void delegate(address to) {
        Voter sender = voters[msg.sender]
        to_ = to
        for (_ : to 9) {
            if (voters[to].delegate == address(0)) {
                break
            }
            to_ = voters[to].delegate

            assert(to_ != msg.sender) // Found loop in delegation
        }

        sender.voted = true
        sender.delegate = to_
        Voter delegate_ = voters[to_]
        if (delegate_.voted) {
            proposals[delegate_.vote].voteCount += sender.weight
        } else {
            delegate_.weight += sender.weight
        }
    }


}