VersionDirective = "version" Integer "." Integer;
Contract = "contract" Identifier [ "is" Identifier { "," Identifier} ] ;
Interface = "interface" Identifier [ "is" Identifier { "," Identifier} ] ;
Annotation = "[" Identifier [ "=" Identifier | Expression ] "]";
Variable = Type Identifier ";";
Method = MethodHead MethodBody;
MethodHead = Type Identifier "(" ParameterList ")";
ParameterList = [ Parameter {"," Parameter}];
Parameter = Type Identifier;
MethodBody = StatementBlock;
ArrayType = Type "[" "]";
StatementBlock = "{" { Statement } "}";
Statement = ";" | Variable | Assignment | IfStatement | WhileStatement | CallStatement | ReturnStatement;
Assignment = Designator "=" Expression ";";
IfStatement = "if" "(" Expression ")" StatementBlock [ "else if" "(" Expression ")" StatementBlock ] [ "else" StatementBlock ];
WhileStatement = "while";
CallStatement = MethodCall ";";
ReturnStatement = "return" Expression { "," Expression } ;
Expression = { "||" LogicTerm };
LogicTerm = LogicFactor { "&&" LogicFactor };
LogicFactor = SimpleExpression { CompareOperator SimpleExpression };
CompareOperator = "==" | "!=" | "<" | "<=" | ">" | ">=";
SimpleExpression = Term {( "+" | "-" ) Term };
Term = Factor { ( "*" | "/" | "%" ) Factor };
Factor = Operand | UnaryExpression | PrefixExpression | "(" Expression ")" | Cast;
PrefixExpression = ( "++" | "--" ) Factor;
UnaryExpression = ( "!" | "+" | "-" ) Factor;
Operand = Literal | Designator | MapCreation | ArrayCreation | MethodCall;
Cast = "(" Identifier ")" Designator;
Literal = Integer | Address | Character | String;
Designator = Identifier | Designator "." Identifier | Designator "[" Expression "]";
MapCreation = "new" "Map" "<"Type "," Type ">" "(" ")";
ArrayCreation = "new" Identifier "[" Expression "]";
MethodCall = Designator "(" ArgumentList ")";
ArgumentList = [ Expression { "," Expression }];
Identifier = Letter { Letter | Digit };
Address = "0x" { HexDigit };
Integer = Digit { Digit };
Character = "'" CharCode "'";
String = """ { CharCode } """;
Letter = "A" .. "Z" | "a" .. "z";
Digit = "0" .. "9";
HexDigit = Digit | "a" .. "f";
CharCode = any character except ' in Character and except " in String.;