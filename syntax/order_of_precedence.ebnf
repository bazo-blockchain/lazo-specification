TernaryExpression = Expression "?" Statement ":" Statement ";";
Expression = { "||" LogicTerm };
LogicTerm = LogicFactor { "&&" LogicFactor };
LogicFactor = BitwiseOrExpression "|" BitwiseOrExpression;
BitwiseOrExpression = BitwiseXOrExpression "^" BitwiseXOrExpression;
BitwiseXorExpression = BitwiseAndExpression "&" BitwiseAndExpression;
BitwiseAndExpression = EqualityExpression { ( "!=" | "==" ) EqualityExpression };
EqualityExpression = ComparisonExpression { ( "<" | "<=" | ">" | ">=" ) ComparisonExpression };
ComparisonExpression = BitwiseShiftExpression ( "<<" | ">>" ) BitwiseShiftOperator;
BitwiseShiftExpression = Term {("+" | "-" ) Term};
Term = Factor { ( "*" | "/" | "%" ) Factor };
Factor = Exponent {( "**" ) Exponent};
Exponent = "(" Type ")" CastExpression;
CastExpression = PrefixExpression | UnaryExpression;
PrefixExpression = ( "++" | "--" ) CallExpression;
UnaryExpression = ( "!" | "+" | "-" | "âˆ¼" ) ( CallExpression | PostfixExpression );
CallExpression = Operand | "(" Expression ")";
PostfixExpression = CallExpression ( "++" | "--" );
Operand = Literal | Designator | MapCreation | ArrayCreation | FunctionCall;
Literal = Integer | Address | Character | String | Bool ;